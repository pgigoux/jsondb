import string
import uuid
import time
import re
import getpass
from datetime import datetime


class Uid:
    """
    Class used to generate unique sequential identifiers
    These identifiers are shorter than the ones generated by uuid4()
    """

    # First uid value
    FIRST_UID = 1000

    # Last uid returned
    uid_last = FIRST_UID

    # List of all uid returned. Used to check for duplicates.
    uid_list = []

    @classmethod
    def clear(cls):
        """
        Clear the class variables (testing only)
        :return:
        """
        cls.uid_last = cls.FIRST_UID
        cls.uid_list = []

    @classmethod
    def get_uid(cls) -> int:
        """
        :return: unique identifier
        """
        cls.uid_last += 1
        if cls.uid_last not in cls.uid_list:
            cls.uid_list.append(cls.uid_last)
        else:
            raise ValueError('duplicate uid')
        return cls.uid_last

    @classmethod
    def dump(cls):
        for uid in cls.uid_list:
            print(uid)


def match_strings(pattern: str, s: str):
    """
    Check whether a regex pattern is contained into another string.
    The string matching is case insensitive.
    :param pattern: pattern to match
    :param s: string where to search
    :return: True in the string is
    """
    return True if re.search(pattern.lower(), s.lower()) else False


def trimmed_string(value: str) -> str:
    """
    Trim string. Provided for convenience.
    :param value: string value to trim
    :return: trimmed string
    """
    return value.strip()


def filter_control_characters(value: str) -> str:
    """
    Replace control characters from a string with a '<n>' equivalent.
    Used for debugging.
    :param value:
    :return: filtered value
    """
    o_str = ''
    for c in value:
        if c in string.printable and c not in string.whitespace or c == ' ':
            o_str += c
        else:
            o_str += '<' + str(ord(c)) + '>'
    return o_str


def timestamp() -> str:
    """
    Return a string time stamp up to the second.
    :return: time stamp
    """
    return time.strftime("%Y%m%d%H%M%S", time.gmtime())


def timestamp_to_time(time_stamp: int) -> str:
    """
    Return the local date and time corresponding to the POSIX timestamp
    Time is returned as yyyy-mm-dd hh:mm:ss
    :param time_stamp: time stamp
    :return: string representation of the time
    """
    try:
        return str(datetime.fromtimestamp(time_stamp))
    except OverflowError:
        return 'overflow'


def get_password() -> str:
    """
    Read a password from the standard input.
    :return:
    """
    return getpass.getpass('Password: ').strip()


if __name__ == '__main__':
    print(Uid.get_uid())
